name: VectorCore CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black flake8 mypy

    - name: Lint with flake8
      run: |
        # Stop build if Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Format check with black
      run: |
        black --check --diff .

    - name: Type check with mypy
      run: |
        mypy *.py --ignore-missing-imports

    - name: Run unit tests
      run: |
        python -m pytest tests.py -v --cov=. --cov-report=xml

    - name: Run performance benchmarks
      run: |
        python tests.py --benchmark

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3

    - name: Build Docker image
      run: |
        docker build -t vectorcore:latest .

    - name: Test Docker image
      run: |
        # Start container in background
        docker run -d --name vectorcore-test -p 8888:8888 vectorcore:latest
        
        # Wait for startup
        sleep 10
        
        # Test connection
        python -c "
        import socket
        import time
        s = socket.socket()
        s.settimeout(5)
        s.connect(('localhost', 8888))
        s.send(b'STATS\n')
        response = s.recv(1024)
        print('Docker test successful:', response.decode())
        s.close()
        "
        
        # Clean up
        docker stop vectorcore-test
        docker rm vectorcore-test

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Run security scan with bandit
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true

    - name: Run dependency check
      run: |
        pip install safety
        safety check --json --output safety-report.json || true

    - name: Upload security artifacts
      uses: actions/upload-artifact@v2
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json 